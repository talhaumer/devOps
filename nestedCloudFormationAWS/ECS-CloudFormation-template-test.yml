
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates an Amazon ECS infrastructure.'

Parameters:
  ClusterName:
    Type: String
    Description: Name for the ECS cluster
    Default: MyTestingECS-Cluster

  ServiceName:
    Type: String
    Description: Name for the ECS service
    Default: MyTestingECS-Service

  DockerImage:
    Type: String
    Description: Docker image for the container
    Default: 449535093264.dkr.ecr.us-east-2.amazonaws.com/offerapproved-admin-ui:5fe73b657f2a4c2ea2d1

  TaskCpu:
    Type: String
    Description: CPU units for the task
    Default: 512

  TaskMemory:
    Type: String
    Description: Memory limit for the task
    Default: 1024

  ContainerPort:
    Type: Number
    Description: Port number for the container
    Default: 80

  LogGroupName:
    Type: String
    Description: Name of the CloudWatch Logs group
    Default: MyTestingECS-Logs

  DesiredCount:
    Type: Number
    Description: Desired number of tasks in the ECS service
    Default: 1
 
  TargetGroupName:
    Type: String
    Description: List of target group name
    Default: MyTestingECS-TG
  
  CertificateArnLink:
    Type: String
    Description: Add link of certificate arn link
    Default: arn:aws:acm:us-east-2:449535093264:certificate/f739a484-9eac-4737-be0b-c3eaee9a1d34
  
  ApplicationLoadBlancerName:
    Type: String
    Description: Name of the application load blancer
    Default: MyTestingECS-ALB
  
  Environment:
    Type: String
    Description: Select the appropriate environment
    Default: prod
    AllowedValues:
      - dev
      - test
      - uat
      - prod

  TaskRoleName:
    Type: String
    Description: Name of the task role
    Default: MyTestingECS-TR

  
  VpcId:
    Type: String
    Default: vpc-061b9e7854d388cb7	

  PublicSubnetOne:
    Description: 'Value of the first public subnet'
    Type: String
    Default: subnet-09ae9045296bc07c5
    
  PublicSubnetTwo:
    Description: 'Value of the second public subnet'
    Type: String
    Default: subnet-0c5479213e900a111

  PrivateSubnetOne:
    Description: 'Value of the first public subnet'
    Type: String
    Default: subnet-03e457cc81a74ebaf
    
  PrivateSubnetTwo:
    Description: 'Value of the second public subnet'
    Type: String
    Default: subnet-0b3a19527fea79da9

  ContainerName:
    Type: String
    Description: Enter the name of container
    Default: MyTestingECS-Container

    

Resources:
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterName

  ApplicationLoadBlancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Ref ApplicationLoadBlancerName
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Type: application
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 200
      SecurityGroups:
        - !GetAtt ApplicationLoadBlancerSG.GroupId


  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName


  ApplicationTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Ref TargetGroupName
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      TargetType: ip

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBlancer
      Port: 80
      Protocol: HTTP

  HTTPSlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ApplicationLoadBlancer
    Properties:
      DefaultActions:
          - TargetGroupArn: !Ref ApplicationTargetGroup
            Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBlancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArnLink

  ApplicationLoadBlancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SG for the  ALB
      GroupName: !Sub "${Environment}-ApplicationLoadBlancerSG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VpcId

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ApplicationLoadBlancerSG

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ApplicationTargetGroup
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1


  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: secrets
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
                Resource:
                  - arn:aws:secretsmanager:*
                  - arn:aws:kms:*
                  
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      RoleName: !Ref TaskRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: GetAccessToSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
                Resource:
                  - arn:aws:secretsmanager:*
                  - arn:aws:kms:*

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref ServiceName
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Ref DockerImage
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName


  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: 80
          TargetGroupArn: !Ref ApplicationTargetGroup
  
      

Outputs:

    EcsServiceArn:
        Description: A reference to the created ECS service ARN
        Value: !Ref Service

    EcsClusterName:
        Description: A reference to the created ECS service ARN
        Value: !Ref Cluster

    EcsTaskExecutionRoleArn:
        Description: A reference to the created IAM role ARN
        Value: !Ref ExecutionRole